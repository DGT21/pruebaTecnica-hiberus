/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.util.Optional;

import javax.validation.Valid;

import org.openapitools.model.Contacto;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-07-18T18:18:20.394926200+02:00[Europe/Madrid]")
@Validated
@Api(value = "contactos", description = "the contactos API")
public interface ContactosApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /contactos : Eliminación de un contacto de la agenda
     * Eliminación de un contacto
     *
     * @param id Cabecera indicando el id del contacto (required)
     * @return Expediente obtenido correctamente (status code 200)
     *         or Error en el formato de la peticion (status code 400)
     *         or No autorizado el acceso (status code 401)
     *         or No autorizado el acceso (status code 403)
     *         or Elemento no encontrado (status code 404)
     *         or Se han obtenido demasiados resultados (status code 429)
     *         or Error indeterminado en el servidor (status code 200)
     */
    @ApiOperation(value = "Eliminación de un contacto de la agenda", nickname = "contactosDelete", notes = "Eliminación de un contacto", response = Object.class, tags={ "contactos (modificacion)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expediente obtenido correctamente", response = Object.class),
        @ApiResponse(code = 400, message = "Error en el formato de la peticion", response = Object.class),
        @ApiResponse(code = 401, message = "No autorizado el acceso", response = Object.class),
        @ApiResponse(code = 403, message = "No autorizado el acceso", response = Object.class),
        @ApiResponse(code = 404, message = "Elemento no encontrado", response = Object.class),
        @ApiResponse(code = 429, message = "Se han obtenido demasiados resultados", response = Object.class),
        @ApiResponse(code = 200, message = "Error indeterminado en el servidor", response = Object.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/contactos",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> contactosDelete(@ApiParam(value = "Cabecera indicando el id del contacto", required = true) @RequestHeader(value = "id", required = true) String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /contactos : Obtiene un listado de contactos
     * listado de contactos
     *
     * @param orderBy Indica el campo de ordenación (optional)
     * @return Listado de contactos paginado (status code 206)
     *         or Error en el formato de la peticion (status code 400)
     *         or No autorizado el acceso (status code 401)
     *         or No autorizado el acceso (status code 403)
     *         or Se han obtenido demasiados resultados (status code 429)
     *         or Error indeterminado en el servidor (status code 200)
     */
    @ApiOperation(value = "Obtiene un listado de contactos", nickname = "contactosGet", notes = "listado de contactos", response = Object.class, tags={ "contactos (modificacion)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 206, message = "Listado de contactos paginado", response = Object.class),
        @ApiResponse(code = 400, message = "Error en el formato de la peticion", response = Object.class),
        @ApiResponse(code = 401, message = "No autorizado el acceso", response = Object.class),
        @ApiResponse(code = 403, message = "No autorizado el acceso", response = Object.class),
        @ApiResponse(code = 429, message = "Se han obtenido demasiados resultados", response = Object.class),
        @ApiResponse(code = 200, message = "Error indeterminado en el servidor", response = Object.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/contactos",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> contactosGet(@ApiParam(value = "Indica el campo de ordenación", allowableValues = "nombre, apellido") @Valid @RequestParam(value = "orderBy", required = false) String orderBy) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /contactos : Crea un nuevo contacto evitando repetidos
     * Creación de un contacto
     *
     * @param id Cabecera indicando el id del contacto (required)
     * @param UNKNOWN_BASE_TYPE Modelo de Certificado de Asistencia  (required)
     * @return Contacto creado correctamente (status code 201)
     *         or Error en el formato de la peticion (status code 400)
     *         or No autorizado el acceso (status code 401)
     *         or No autorizado el acceso (status code 403)
     *         or Elemento no encontrado (status code 404)
     *         or El contacto ya existe (status code 409)
     *         or Se han obtenido demasiados resultados (status code 429)
     *         or Error indeterminado en el servidor (status code 200)
     */
    @ApiOperation(value = "Crea un nuevo contacto evitando repetidos", nickname = "contactosPost", notes = "Creación de un contacto", response = Object.class, tags={ "contactos (modificacion)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Contacto creado correctamente", response = Object.class),
        @ApiResponse(code = 400, message = "Error en el formato de la peticion", response = Object.class),
        @ApiResponse(code = 401, message = "No autorizado el acceso", response = Object.class),
        @ApiResponse(code = 403, message = "No autorizado el acceso", response = Object.class),
        @ApiResponse(code = 404, message = "Elemento no encontrado", response = Object.class),
        @ApiResponse(code = 409, message = "El contacto ya existe", response = Object.class),
        @ApiResponse(code = 429, message = "Se han obtenido demasiados resultados", response = Object.class),
        @ApiResponse(code = 200, message = "Error indeterminado en el servidor", response = Object.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/contactos",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Object> contactosPost(@ApiParam(value = "Cabecera indicando el id del contacto", required = true) @RequestHeader(value = "id", required = true) String id,@ApiParam(value = "Modelo de Certificado de Asistencia ", required = true) @Valid @RequestBody Contacto contacto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /contactos : Actualización de los datos de un contacto
     * Modifica un contacto
     *
     * @param id Cabecera indicando el id del contacto (required)
     * @param UNKNOWN_BASE_TYPE Modelo de Certificado de Asistencia  (required)
     * @return Contacto actualizado correctamente (status code 201)
     *         or Error en el formato de la peticion (status code 400)
     *         or No autorizado el acceso (status code 401)
     *         or No autorizado el acceso (status code 403)
     *         or Elemento no encontrado (status code 404)
     *         or Se han obtenido demasiados resultados (status code 429)
     *         or Error indeterminado en el servidor (status code 200)
     */
    @ApiOperation(value = "Actualización de los datos de un contacto", nickname = "contactosPut", notes = "Modifica un contacto", response = Object.class, tags={ "contactos (modificacion)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Contacto actualizado correctamente", response = Object.class),
        @ApiResponse(code = 400, message = "Error en el formato de la peticion", response = Object.class),
        @ApiResponse(code = 401, message = "No autorizado el acceso", response = Object.class),
        @ApiResponse(code = 403, message = "No autorizado el acceso", response = Object.class),
        @ApiResponse(code = 404, message = "Elemento no encontrado", response = Object.class),
        @ApiResponse(code = 429, message = "Se han obtenido demasiados resultados", response = Object.class),
        @ApiResponse(code = 200, message = "Error indeterminado en el servidor", response = Object.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/contactos",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Object> contactosPut(@ApiParam(value = "Cabecera indicando el id del contacto", required = true) @RequestHeader(value = "id", required = true) String id,@ApiParam(value = "Modelo de Certificado de Asistencia ", required = true) @Valid @RequestBody Contacto contacto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
